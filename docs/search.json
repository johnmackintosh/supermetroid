[{"path":"https://softloud.github.io/supermetroid/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 supermetroid authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://softloud.github.io/supermetroid/articles/data-schema.html","id":"sources","dir":"Articles","previous_headings":"Getting the data","what":"Sources","title":"data-schema","text":"several sites players upload Super Metroid speed running data.","code":"tribble(   ~source, ~runs, ~players,   \"speedrun.com\", nrow(src_run_df), NA,   \"splits.io\", NA, NA,   \"deertier\", NA, NA ) %>%    gt()"},{"path":"https://softloud.github.io/supermetroid/articles/data-schema.html","id":"desired-output-ggplot-friendlytidy-data","dir":"Articles","previous_headings":"Getting the data","what":"Desired output: ggplot-friendly/tidy data","title":"data-schema","text":"Dataframes describe runs, runners, , eventually, categories. Ideally, aggregated across datasets. However, results missing data, specific analyses need take account, use source-specific datasets aggregated set caveats. Linking ids italics. Either way, need know dataset, universal schema across datasets.","code":""},{"path":"https://softloud.github.io/supermetroid/articles/data-schema.html","id":"runs","dir":"Articles","previous_headings":"Getting the data > Desired output: ggplot-friendly/tidy data","what":"Runs","title":"data-schema","text":"row describes one speed run; player may multiple runs database. build speed run leaderboard across datasets, ’d need fancy engineering, focus source-specific analyses now. leaderboard comprises runs.","code":""},{"path":[]},{"path":[]},{"path":"https://softloud.github.io/supermetroid/articles/data-schema.html","id":"import-pkg-helper-functions","dir":"Articles","previous_headings":"","what":"Import pkg & helper functions","title":"data-schema","text":"","code":"import srcomapi, srcomapi.datatypes as dt import pandas as pd import pickle import splitsio library(tidyquant) library(ggdist) # for rainclouds library(reticulate) # Python <-> R  # load r functions for this analysis library(supermetroid) # helper function: saving an anonymous object in python  # https://stackoverflow.com/questions/4529815/saving-an-object-data-persistence  def save_object(obj, filename):     with open(filename, 'wb') as outp:  # Overwrites any existing file.         pickle.dump(obj, outp, pickle.HIGHEST_PROTOCOL)"},{"path":"https://softloud.github.io/supermetroid/articles/data-schema.html","id":"deertier","dir":"Articles","previous_headings":"","what":"deertier","title":"data-schema","text":"port code","code":""},{"path":"https://softloud.github.io/supermetroid/articles/data-schema.html","id":"speedrunslive","dir":"Articles","previous_headings":"","what":"speedrunslive","title":"data-schema","text":"enough splitsio srdcom analyses.","code":""},{"path":[]},{"path":"https://softloud.github.io/supermetroid/articles/player-locations.html","id":"players-by-rank","dir":"Articles","previous_headings":"Player locations","what":"players by rank","title":"player-locations","text":"","code":"location_dat <-    src_df %>%      select(player_name, location, rank) %>%      distinct() %>%      ungroup() %>%      mutate(location = if_else(       location %in% c(\"missing\", \"NaN\"),       \"*Missing*\",       location     )) %>%      group_by(location) %>%      summarise(       players = n(),       highest_rank = min(rank),       median_rank = median(rank) %>% round(),       lowest_rank = max(rank)     )   location_dat %>%    arrange(highest_rank) %>%    gt() %>%    tab_header(title = \"Best-ranked players ranks by location\")"},{"path":"https://softloud.github.io/supermetroid/articles/player-locations.html","id":"for-dashboard-would-be-good-to-see-where-most-players-are","dir":"Articles","previous_headings":"Player locations","what":"For dashboard, would be good to see where most players are","title":"player-locations","text":"","code":"location_dat %>%    arrange(desc(players)) %>%    gt() %>%    tab_header(title = \"Where the most players are\")"},{"path":[]},{"path":"https://softloud.github.io/supermetroid/articles/player-rank.html","id":"create-a-dataframe-with-splitsio-observations-of-game-events-with-srcomapi-rank-and-location-","dir":"Articles","previous_headings":"","what":"Create a dataframe with splitsio observations of game events, with srcomapi rank and location.","title":"sio-player-rank","text":"join theses elements speedrun.com data splits.io data.","code":"# speedrun.com, each row is a player src_join_df <-   src_df %>%   group_by(player_name) %>%   filter(rank == max(rank)) %>%   rename_with( ~ paste0(\"src_\", .x)) #> Error in UseMethod(\"group_by\"): no applicable method for 'group_by' applied to an object of class \"function\"  head(src_join_df) #> Error in eval(expr, envir, enclos): object 'src_join_df' not found  # need to debug player id types splits_df <- left_join(sio_df, src_join_df,            by = c(\"player_id\" = \"src_player_id\")) #> Error in eval(expr, envir, enclos): object 'src_join_df' not found usethis::use_data(splits_df)"},{"path":"https://softloud.github.io/supermetroid/articles/route-graph.html","id":"route-graph","dir":"Articles","previous_headings":"","what":"Route graph","title":"route-graph","text":"Create digraph represent routes taken players.","code":""},{"path":"https://softloud.github.io/supermetroid/articles/route-graph.html","id":"extract-bits-i-need","dir":"Articles","previous_headings":"","what":"extract bits I need","title":"route-graph","text":"Need use realtime_start_ms realtime_end_ms figure one ? Hmmm, just use .","code":"long_routes <-    sio_df %>%    select(run_id, supermetroid_label, realtime_end_ms, realtime_start_ms)  head(long_routes) #>   run_id supermetroid_label realtime_end_ms realtime_start_ms #> 1   ato1         morph ball          200835                 0 #> 2   ato1               <NA>          224926            200835 #> 3   ato1              bombs          358321            224926 #> 4   ato1               <NA>          589662            358321 #> 5   ato1        charge beam          709962            589662 #> 6   ato1             spazer          807838            709962 # take a look at a dataset from ggraph highschool %>% head() #>   from to year #> 1    1 14 1957 #> 2    1 15 1957 #> 3    1 21 1957 #> 4    1 54 1957 #> 5    1 55 1957 #> 6    2 21 1957 # take a look at one run run_events <-  long_routes  %>%    filter(run_id == last(run_id),          !is.na(supermetroid_label)) %>%    arrange(realtime_start_ms) %>%    pull(supermetroid_label)  # and create a from, to df tibble(   from = c(\"start\", run_events),   to = c(run_events, \"end\") ) #> # A tibble: 13 × 2 #>    from               to                 #>    <chr>              <chr>              #>  1 start              bombs              #>  2 bombs              varia suit         #>  3 varia suit         speed booster      #>  4 speed booster      grapple beam       #>  5 grapple beam       phantoon           #>  6 phantoon           gravity suit       #>  7 gravity suit       spore spawn supers #>  8 spore spawn supers space jump         #>  9 space jump         plasma beam        #> 10 plasma beam        screw attack       #> 11 screw attack       x-ray              #> 12 x-ray              golden 4           #> 13 golden 4           end"},{"path":"https://softloud.github.io/supermetroid/articles/route-graph.html","id":"create-a-from-to-dataframe-for-each-route","dir":"Articles","previous_headings":"","what":"Create a from-to dataframe for each route","title":"route-graph","text":"","code":"route_from_to_df <- function(this_route, this_route_id) {   route_events <- this_route$supermetroid_label      # and create a from, to df   tibble(from = c(\"start\", route_events),          to = c(route_events, \"end\")) }  route_from_to_df(distinct_routes$route[[3]], distinct_routes$route_id[[3]]) #> # A tibble: 13 × 2 #>    from               to                 #>    <chr>              <chr>              #>  1 start              bombs              #>  2 bombs              varia suit         #>  3 varia suit         speed booster      #>  4 speed booster      grapple beam       #>  5 grapple beam       phantoon           #>  6 phantoon           gravity suit       #>  7 gravity suit       spore spawn supers #>  8 spore spawn supers space jump         #>  9 space jump         plasma beam        #> 10 plasma beam        screw attack       #> 11 screw attack       x-ray              #> 12 x-ray              golden 4           #> 13 golden 4           end  # now can apply to df from_to_df <-   distinct_routes %>%   mutate(     runs = map_int(run_id, nrow),     from_to = map2(route, route_id, route_from_to_df)   ) %>%   select(from_to, route_id, runs) %>%   unnest(from_to)  head(from_to_df) #> # A tibble: 6 × 4 #>   from          to            route_id  runs #>   <chr>         <chr>         <chr>    <int> #> 1 start         morph ball    route  1     9 #> 2 morph ball    charge beam   route  1     9 #> 3 charge beam   spazer        route  1     9 #> 4 spazer        kraid         route  1     9 #> 5 kraid         hi-jump boots route  1     9 #> 6 hi-jump boots speed booster route  1     9"},{"path":"https://softloud.github.io/supermetroid/articles/route-graph.html","id":"create-a-digraph-that-answers-my-question","dir":"Articles","previous_headings":"","what":"Create a digraph that answers my question","title":"route-graph","text":"routes players take Super Metroid","code":"from_to_gg <-    from_to_df %>%    head(1000) %>%    as_tbl_graph()  anatomecha_gg <-     from_to_df %>%    filter(route == \"route  1\") %>%    as_tbl_graph() #> Error in `filter()`: #> ℹ In argument: `route == \"route 1\"`. #> Caused by error: #> ! object 'route' not found"},{"path":"https://softloud.github.io/supermetroid/articles/route-graph.html","id":"too-messy","dir":"Articles","previous_headings":"Create a digraph that answers my question","what":"Too messy","title":"route-graph","text":"","code":"from_to_gg %>%    ggraph() +   geom_edge_fan(aes(size = runs)) #> Using \"stress\" as default layout #> Warning in geom_edge_fan(aes(size = runs)): Ignoring unknown aesthetics: #> edge_size #> Warning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` in the `default_aes` field and elsewhere instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated."},{"path":"https://softloud.github.io/supermetroid/articles/route-graph.html","id":"need-order","dir":"Articles","previous_headings":"Create a digraph that answers my question","what":"Need order","title":"route-graph","text":"","code":"from_to_gg %>%   ggraph(layout = \"linear\", circular = TRUE) +   geom_edge_fan(aes(size = runs), alpha = 0.2) +   geom_node_point(aes(colour = )) #> Warning in geom_edge_fan(aes(size = runs), alpha = 0.2): Ignoring #> unknown aesthetics: edge_size"},{"path":"https://softloud.github.io/supermetroid/articles/route-graph.html","id":"need-direction","dir":"Articles","previous_headings":"Create a digraph that answers my question","what":"Need direction","title":"route-graph","text":"","code":"from_to_gg %>%   ggraph(layout = \"linear\") +   geom_edge_fan(aes(size = runs), alpha = 0.2) +   geom_node_point() #> Warning in geom_edge_fan(aes(size = runs), alpha = 0.2): Ignoring #> unknown aesthetics: edge_size"},{"path":"https://softloud.github.io/supermetroid/articles/route-graph.html","id":"too-many-nodes-for-eda","dir":"Articles","previous_headings":"Create a digraph that answers my question","what":"Too many nodes for EDA","title":"route-graph","text":"","code":"from_to_gg %>%    ggraph(layout = \"linear\") +   geom_edge_arc(arrow = arrow(), aes(alpha = runs))"},{"path":"https://softloud.github.io/supermetroid/articles/route-graph.html","id":"strats","dir":"Articles","previous_headings":"","what":"Strats","title":"route-graph","text":"Discussed @anatomecha game events important gamer strategies interested , strats.","code":"bosses <- c(\"kraid\", \"phantoon\", \"draygon\", \"ridley\") loot <- c(\"ice beam\", \"grapple beam\")   selected_splits <- c(\"kraid\",\"ice beam\", \"gravity suit\", \"draygon\", \"ridley\", \"varia suit\", \"space jump\") from_to_df %>%   filter(from %in% selected_splits,          to %in% selected_splits) %>%   # filter(from %in% c(bosses, loot),   #        to %in% c(bosses, loot)) %>%   # mutate(from = str_wrap(from, 7),   #         to = str_wrap(from, 7)) %>%    as_tbl_graph() %>%    ggraph(layout = \"linear\") +   geom_edge_arc(arrow = arrow(), aes(alpha = runs),                 colour= sm_cols$orange) +   geom_edge_fan(colour= sm_cols$resolution_blue, alpha = 0.2) +   geom_node_text(     aes(label=name),      colour=sm_cols$text_green,     family=\"courier\",      size = 4,     angle = 45) +   labs(     title = \"Recorded but incomplete player routes and strats\",     subtitle = \"Players choose which events to record\",     x = \"Order of event determined by ggraph\",     y = \"\"   ) +   theme_sm(base_size = 20) +   theme(     axis.text.x = element_blank(),     axis.text.y = element_blank()   )"},{"path":"https://softloud.github.io/supermetroid/articles/route-matching.html","id":"identify-number-of-routes","dir":"Articles","previous_headings":"","what":"Identify number of routes","title":"route-matching","text":"data 569 runs use 211 routes, subroutes considered separate routes. isn’t quite want, .e., route containing single label considered distinct every route label . want know number classes route, contain every subroute. Single labels can’t considered (except via classification, ’m thinking kind centroid thing). todo single label analysis classify routes easy routes, .e., route = ,b,d, considered route ,b,c,d, instead different, 211 routes counts. , many actual routes represented, many runs can classify? Filtering routes greater 1, 206 different routes subroutes.","code":"knitr::include_graphics(\"route_math.jpg\") # get routes run_routes <-    sio_df %>%      # ensure data is arranged by run, ordered by segment time     arrange(run_id, realtime_end_ms) %>%      # why is player name a list?     mutate(player_name = as.character(player_name)) %>%      # filter to common splits shared by players     filter(!is.na(supermetroid_label)) %>%     select(player_name, supermetroid_label, run_id) %>%      group_by(run_id) %>%      # create a list-column of label dataframes     nest(data = supermetroid_label) %>%      rename(route = data)   head(run_routes) #> # A tibble: 6 × 3 #> # Groups:   run_id [6] #>   player_name run_id route             #>   <chr>       <chr>  <list>            #> 1 mchan338    100x   <tibble [18 × 1]> #> 2 tm9001      105d   <tibble [1 × 1]>  #> 3 tm9001      10a5   <tibble [1 × 1]>  #> 4 NaN         12qr   <tibble [12 × 1]> #> 5 NaN         12qs   <tibble [12 × 1]> #> 6 NaN         12qt   <tibble [12 × 1]>  # get distinct routes and their corresponding run_ids distinct_routes <-   run_routes %>%   group_by(route) %>%    nest(.key = \"run_id\") %>%    ungroup() %>%    mutate(route_id = paste(\"route \", 1:n())) %>%    select(route_id, route, run_id)   head(distinct_routes) #> # A tibble: 6 × 3 #>   route_id route             run_id           #>   <chr>    <list>            <list>           #> 1 route  1 <tibble [18 × 1]> <tibble [9 × 2]> #> 2 route  2 <tibble [1 × 1]>  <tibble [2 × 2]> #> 3 route  3 <tibble [12 × 1]> <tibble [6 × 2]> #> 4 route  4 <tibble [16 × 1]> <tibble [3 × 2]> #> 5 route  5 <tibble [9 × 1]>  <tibble [1 × 2]> #> 6 route  6 <tibble [7 × 1]>  <tibble [1 × 2]> # will use these data in route-graph vignette usethis::use_data(distinct_routes) viable_routes <-   # filter out routes of length 1   distinct_routes %>%    mutate(route_length = map_int(route, nrow)) %>%    filter(route_length > 1) %>%    ungroup()  head(viable_routes) #> # A tibble: 6 × 4 #>   route_id route             run_id           route_length #>   <chr>    <list>            <list>                  <int> #> 1 route  1 <tibble [18 × 1]> <tibble [9 × 2]>           18 #> 2 route  3 <tibble [12 × 1]> <tibble [6 × 2]>           12 #> 3 route  4 <tibble [16 × 1]> <tibble [3 × 2]>           16 #> 4 route  5 <tibble [9 × 1]>  <tibble [1 × 2]>            9 #> 5 route  6 <tibble [7 × 1]>  <tibble [1 × 2]>            7 #> 6 route  7 <tibble [10 × 1]> <tibble [1 × 2]>           10"},{"path":"https://softloud.github.io/supermetroid/articles/route-matching.html","id":"identifying-if-one-route-is-a-subset-and-same-permutation-of-another","dir":"Articles","previous_headings":"Identify number of routes","what":"Identifying if one route is a subset and same permutation of another","title":"route-matching","text":"want compare two arbitrary routes, \\(r_1\\) \\(r_2\\), ask \\(r_1\\) subroute \\(r_2\\)? Choose two routes. know two runs routes size size already collapsed nest. Now assign first longest route primary route, route possible subroute comparison route. two routes length, different order, considered distinct routes, , \\(r_1\\) subroute \\(r_2\\). Since routes length, need check \\(r_1\\), possible_subroute subroute \\(r_2\\), comparison_route. Let’s inspect routes.","code":"(two_routes <-   viable_routes %>%    sample_n(2)) #> # A tibble: 2 × 4 #>   route_id   route             run_id           route_length #>   <chr>      <list>            <list>                  <int> #> 1 route  182 <tibble [6 × 1]>  <tibble [1 × 2]>            6 #> 2 route  105 <tibble [10 × 1]> <tibble [1 × 2]>           10 (comparison_route <- two_routes %>%    filter(route_length == max(route_length)) %>%    head(1) %>%    pull(route_id)) #> [1] \"route  105\"  (possible_subroute <- two_routes %>%    filter(route != comparison_route) %>%    pull(route_id)) #> [1] \"route  182\" \"route  105\" # check if the two routes are the same length two_routes$route_length[1] == two_routes$route_length[2] #> [1] FALSE two_routes %>% pull(route) #> [[1]] #> # A tibble: 6 × 1 #>   supermetroid_label #>   <chr>              #> 1 bombs              #> 2 varia suit         #> 3 grapple beam       #> 4 space jump         #> 5 screw attack       #> 6 golden 4           #>  #> [[2]] #> # A tibble: 10 × 1 #>    supermetroid_label #>    <chr>              #>  1 bombs              #>  2 charge beam        #>  3 varia suit         #>  4 speed booster      #>  5 grapple beam       #>  6 gravity suit       #>  7 space jump         #>  8 plasma beam        #>  9 ice beam           #> 10 screw attack"},{"path":"https://softloud.github.io/supermetroid/articles/route-matching.html","id":"check-if-routes-are-in-the-same-order","dir":"Articles","previous_headings":"Identify number of routes","what":"Check if routes are in the same order","title":"route-matching","text":"Now know overlapping subroutes, possible_subroute elements comparison_route .","code":"# figure out comparable ordering of routes  pivoted_routes <-    two_routes %>%      arrange(desc(route_length)) %>%      unnest(route) %>%      select(route_id, supermetroid_label) %>%      group_by(route_id) %>%      mutate(route_order = 1:n()) %>%      mutate(route_label = if_else(route_id == comparison_route,                                   \"comparison_route\", \"possible_subroute\")) %>%     ungroup() %>%      select(-route_id) %>%      pivot_wider(names_from = route_label, values_from = route_order)  # inspect pivoted_routes #> # A tibble: 11 × 3 #>    supermetroid_label comparison_route possible_subroute #>    <chr>                         <int>             <int> #>  1 bombs                             1                 1 #>  2 charge beam                       2                NA #>  3 varia suit                        3                 2 #>  4 speed booster                     4                NA #>  5 grapple beam                      5                 3 #>  6 gravity suit                      6                NA #>  7 space jump                        7                 4 #>  8 plasma beam                       8                NA #>  9 ice beam                          9                NA #> 10 screw attack                     10                 5 #> 11 golden 4                         NA                 6  # now filter for overlapping events compared_routes <- pivoted_routes %>%      # filter      filter(!is.na(comparison_route) & !is.na(possible_subroute)) %>%      # arrange by possible subroute      arrange(possible_subroute) %>%      # and assign order     mutate(possible_order = 1:n()) %>%      # arrange by comparison route order     arrange(comparison_route) %>%      mutate(comparison_order = 1:n(),            order_eq = possible_order == comparison_order)  # inspect compared_routes #> # A tibble: 5 × 6 #>   supermetroid_label comparison_route possible_subroute possible_order #>   <chr>                         <int>             <int>          <int> #> 1 bombs                             1                 1              1 #> 2 varia suit                        3                 2              2 #> 3 grapple beam                      5                 3              3 #> 4 space jump                        7                 4              4 #> 5 screw attack                     10                 5              5 #> # ℹ 2 more variables: comparison_order <int>, order_eq <lgl>   # now check to see if they're all true all(pivoted_routes$order_eq) #> Warning: Unknown or uninitialised column: `order_eq`. #> [1] TRUE  # check to see if all elements of possible subroute are in compared route # otherwise, could match one to many for route classes"},{"path":"https://softloud.github.io/supermetroid/articles/route-matching.html","id":"identify-the-one-to-many-subroutes","dir":"Articles","previous_headings":"Identify number of routes","what":"Identify the one to many subroutes","title":"route-matching","text":"subroute maps one many, need disregard . Need list every combinatorial pairing. Now need compare route. want apply function calls route applies comparison. need return pieces information. Probably kind map_df returns: 1. possible_classroute (might subroute) 2. lengths two routes 3. possible_classroute absolute subroute 4. possible_classroute need find possible_classroute","code":"knitr::include_graphics(\"route_many_to_one.jpg\") viable_route_id <- viable_routes %>%    pull(route_id)  comparison_id_df <- expand.grid(viable_route_id, viable_route_id) %>%    rename(comparison_route = Var1, possible_subroute = Var2) %>%    filter(comparison_route != possible_subroute) %>%   arrange(comparison_route) %>%    mutate(     comparison_id = str_c(       \"c \", str_extract(comparison_route, \"\\\\d+\"),       \" p \", str_extract(possible_subroute, \"\\\\d+\")      )   )  # take a look at combinations comparison_id_df %>% head() #>   comparison_route possible_subroute comparison_id #> 1         route  1          route  3       c 1 p 3 #> 2         route  1          route  4       c 1 p 4 #> 3         route  1          route  5       c 1 p 5 #> 4         route  1          route  6       c 1 p 6 #> 5         route  1          route  7       c 1 p 7 #> 6         route  1          route  8       c 1 p 8   # how many combinations would we expect? # number of routes * 1 less number of routes  # because we won't compare a route with itself length(viable_route_id) * (length(viable_route_id) - 1)  #> [1] 42230  # comfirm number of comparisons comparison_id_df %>%    nrow() #> [1] 42230  # whoa combinatorics!"},{"path":[]},{"path":"https://softloud.github.io/supermetroid/articles/sio.html","id":"load-runs-and-runners","dir":"Articles","previous_headings":"splits.io data","what":"Load runs and runners","title":"sio","text":"","code":"# this chunk is not evaluated  # to minimise api calls  # get 100% Category Super Metroid game data   sio_cat = splitsio.Category.from_id(\"279\", historic=False) save_object(sio_cat, \"data-raw/sio_cat.pkl\") # load sio data with open('data-raw/sio_cat.pkl', 'rb') as inp:     sio_cat = pickle.load(inp)  # extract runners and run from category sio_runners = sio_cat.runners()  sio_runs = sio_cat.runs()"},{"path":"https://softloud.github.io/supermetroid/articles/sio.html","id":"try-with-converting-to-a-dictionary-much-earlier","dir":"Articles","previous_headings":"","what":"Try with converting to a dictionary much earlier","title":"sio","text":"","code":"type(sio_runs) sio_runs.__dict__.keys()  sio_runs.__dict__.keys() sio_run_dict_max = 3  sio_run_dicts = [sio_runs[x].to_dict() for x in range(sio_run_dict_max)]  # each element of the list is a dictionary with keys sio_run_dicts[0].keys() testing_index <- 3  # find"},{"path":"https://softloud.github.io/supermetroid/articles/sio.html","id":"inspect-data","dir":"Articles","previous_headings":"Try with converting to a dictionary much earlier","what":"Inspect data","title":"sio","text":"","code":"# take a look at a run sio_runs[0]  # can we call nested elements by index and key? type(sio_runs[0]) # I think this is a series object? print(pd.DataFrame(sio_runs[1:3]))  print(pd.DataFrame(sio_runs[1:3]).columns) # take a look at a runner sio_runners[0]"},{"path":"https://softloud.github.io/supermetroid/articles/sio.html","id":"run-dataframe","dir":"Articles","previous_headings":"Try with converting to a dictionary much earlier","what":"Run dataframe","title":"sio","text":"Objective: wrangle data frame run data","code":""},{"path":"https://softloud.github.io/supermetroid/articles/sio.html","id":"try-with-list-of-dictionaries","dir":"Articles","previous_headings":"Try with converting to a dictionary much earlier","what":"Try with list of dictionaries","title":"sio","text":"","code":"sio_run_dicts = [sio_runs[x].to_dict() for x in range(len(sio_runs))]  # each element is a dictionary with keys sio_run_dicts[0].keys() # run id sio_run_dicts[0].keys()  # get id sio_run_dicts[0]['id']  # get realtime sio_run_dicts[0]['realtime_duration_ms'] # player data pd.json_normalize(sio_run_dicts[0]['runners'])['id'][0]  sio_run_player_index = 10 # len(sio_run_dicts)  run_runners_list = [pd.json_normalize(sio_run_dicts[x]['runners']).assign(run_id = sio_runs[x].id) for x in range(len(sio_runs))]  run_runners_concat = pd.concat(run_runners)  run_runners = run_runners_concat[['display_name', 'name', 'run_id','id']].rename(columns={'id':'player_id', 'name':'player_name'})  len(run_runners) != len(sio_runs) # :( whyeee  sio_run_dicts[0].keys()  sio_runs_df = pd.DataFrame({   'run_id' : [sio_run_dicts[x]['id'] for x in range(len(sio_runs))],   't_ms' : [sio_run_dicts[x]['realtime_duration_ms'] for x in range(len(sio_runs))],   'date' : [sio_run_dicts[x]['updated_at'] for x in range(len(sio_runs))],   'image_url': [sio_run_dicts[x]['image_url'] for x in range(len(sio_runs))],   'video_url': [sio_run_dicts[x]['video_url'] for x in range(len(sio_runs))] }).merge(run_runners, on = \"run_id\", how = 'left').set_index('run_id')  # get segments inspect_sio_runs <- py$sio_runs_df %>% select(-contains(\"url\")) %>%    select(display_name, everything())"},{"path":"https://softloud.github.io/supermetroid/articles/sio.html","id":"create-segments-dataframe","dir":"Articles","previous_headings":"Try with converting to a dictionary much earlier","what":"create segments dataframe","title":"sio","text":"","code":"# first level of segments type(sio_df['segments'][0]) len(sio_df['segments'][0])  # second level of segments type(sio_df['segments'][0][0]) sio_df['segments'][0][2].keys()   segments_list = [pd.DataFrame(sio_df.segments[x]).assign(run_id = sio_df.id[x]) for x in range(sio_df.shape[0]) ]  segment_raw = pd.concat(segments_list)  segment_raw.columns segment_raw.shape  sio_segments_df = segment_raw.merge(   sio_runs_df[['player_name', 'player_id']], on = \"run_id\", how=\"left\") # tidy it up in R before writing it  sio_segments <- py$sio_segments_df   sio_splits_df <-  sio_segments %>%    select(     player_name,      game_event = display_name,      segment_number,      realtime_start_ms,      segment_id = id,     run_id,     player_id,     everything()) %>%    select(-contains(\"gametime\"),          -contains(\"reduced\"),          -contains(\"skipped\"), -histories) %>%    mutate(     player_id = as.character(player_id)) usethis::use_data(sio_splits_df)"},{"path":[]},{"path":"https://softloud.github.io/supermetroid/articles/splits.html","id":"get-segment-labels","dir":"Articles","previous_headings":"","what":"Get segment labels","title":"splits","text":"Splits, segments, measure time game event happens, long player took get previous segment.","code":""},{"path":"https://softloud.github.io/supermetroid/articles/splits.html","id":"unique-split-id","dir":"Articles","previous_headings":"Get segment labels","what":"Unique split id?","title":"splits","text":"Although segments chosen program, far ’ve found player labels split segment. Players can define segments labels, , don’t want confuse points others. hand don’t want keep bomb throw bombs bathwater.","code":"labels_dat <-    # pull columns for this analysis from splits data   sio_splits_df %>%    select(player_name, game_event, name, segment_number, run_id, player_id) %>%    mutate(     # create a lower-case label      label = tolower(game_event)     ) labels_dat %>% head() #>   player_name           game_event                 name segment_number run_id #> 0  anatomecha        Morphing Ball        Morphing Ball              0   ato1 #> 1  anatomecha       First Missiles       First Missiles              1   ato1 #> 2  anatomecha                 Bomb                 Bomb              2   ato1 #> 3  anatomecha First Super Missiles First Super Missiles              3   ato1 #> 4  anatomecha          Charge Beam          Charge Beam              4   ato1 #> 5  anatomecha               Spazer               Spazer              5   ato1 #>   player_id                label #> 0     89646        morphing ball #> 1     89646       first missiles #> 2     89646                 bomb #> 3     89646 first super missiles #> 4     89646          charge beam #> 5     89646               spazer"},{"path":"https://softloud.github.io/supermetroid/articles/splits.html","id":"most-common-labels","dir":"Articles","previous_headings":"","what":"Most common labels","title":"splits","text":"","code":"label_counts <-  labels_dat %>%    mutate(     starts_with = str_sub(label, 1, 1)   ) %>%    count(starts_with, label) %>%    arrange(starts_with, desc(n)) label_counts %>%    ungroup() %>%    select(-starts_with) %>%     arrange(desc(n)) %>%    head(30) %>%    gt() # write labels to sheet for labelling  # https://docs.google.com/spreadsheets/d/1FRHsS7WQvVhI5_yP-twHCJW2YRJRbeKg4P42EY3Jzrk/edit#gid=1079532092   write_csv(label_counts, \"data-raw/sio-label-counts.csv\")  relabels <- googlesheets4::read_sheet(\"https://docs.google.com/spreadsheets/d/1FRHsS7WQvVhI5_yP-twHCJW2YRJRbeKg4P42EY3Jzrk/edit#gid=1079532092\")  write_csv(relabels, \"data-raw/sio-relabels.csv\")"},{"path":"https://softloud.github.io/supermetroid/articles/splits.html","id":"add-labels","dir":"Articles","previous_headings":"","what":"Add labels","title":"splits","text":"","code":"relabels <- read_csv(\"data-raw/sio-relabels.csv\") %>%    select(label, supermetroid_label) %>%    distinct() #> Error: 'data-raw/sio-relabels.csv' does not exist in current working directory ('/home/cantabile/Documents/GitHub/supermetroid/vignettes'). sio_relabelled <-  sio_splits_df %>%    mutate(     label = tolower(game_event)   ) %>%    left_join(relabels, by = \"label\") #> Error: object 'relabels' not found # check out counts now sio_relabelled %>%    ungroup() %>%    count(supermetroid_label) %>%    arrange(desc(n)) %>%    head(30) %>%    gt() #> Error in eval(expr, envir, enclos): object 'sio_relabelled' not found sio_df <- sio_relabelled %>%    select(-name) %>%    select(supermetroid_label, everything(), split_player = label) #> Error in eval(expr, envir, enclos): object 'sio_relabelled' not found  sio_df %>% head() #>   supermetroid_label player_name           game_event segment_number #> 1         morph ball  anatomecha        Morphing Ball              0 #> 2               <NA>  anatomecha       First Missiles              1 #> 3              bombs  anatomecha                 Bomb              2 #> 4               <NA>  anatomecha First Super Missiles              3 #> 5        charge beam  anatomecha          Charge Beam              4 #> 6             spazer  anatomecha               Spazer              5 #>   realtime_start_ms                           segment_id run_id player_id #> 1                 0 69d90da3-1634-4af4-9096-419a32bedd0a   ato1     89646 #> 2            200835 fad50319-d55b-460e-923a-c416f233daea   ato1     89646 #> 3            224926 089daf0b-64c3-4eec-8902-022335b2b179   ato1     89646 #> 4            358321 2a215dcd-2989-4939-8558-a7215904dfd1   ato1     89646 #> 5            589662 e906991d-e919-47c1-a809-2b4da9b67461   ato1     89646 #> 6            709962 10439232-43c7-4752-afb9-ee23782da4a9   ato1     89646 #>   realtime_duration_ms realtime_end_ms realtime_shortest_duration_ms #> 1               200835          200835                        200835 #> 2                24091          224926                         23286 #> 3               133395          358321                        129371 #> 4               231341          589662                        227335 #> 5               120300          709962                        120299 #> 6                97876          807838                         95884 #>   realtime_gold         split_player                split #> 1          TRUE        morphing ball        morphing ball #> 2         FALSE       first missiles       first missiles #> 3         FALSE                 bomb                 bomb #> 4         FALSE first super missiles first super missiles #> 5         FALSE          charge beam          charge beam #> 6         FALSE               spazer               spazer usethis::use_data(sio_df)"},{"path":"https://softloud.github.io/supermetroid/articles/splits.html","id":"what-routes-do-people-take","dir":"Articles","previous_headings":"","what":"What routes do people take?","title":"splits","text":"","code":"routes_raw <-  sio_df %>%    select(supermetroid_label, player_name, split_order = segment_number, realtime_end_ms, run_id, player_id) %>%    # get just the universal splits   filter(!is.na(supermetroid_label)) splits_orders <-  routes_raw %>%    select(supermetroid_label, split_order, run_id)  nested_splits <-  splits_orders %>%    arrange(run_id, split_order) %>%    select(-split_order) %>%    group_by(run_id) %>%    nest(splits = supermetroid_label) %>%    ungroup() %>%    group_by(splits) %>%    nest(runs = run_id) %>%    ungroup() %>%    mutate(     route_length = map_int(splits, nrow),     route_id = str_c(\"route \", 1:n())   ) %>%    arrange(desc(route_length))    nested_splits %>%   head() %>%    gt() anatomecha_splits <-   # get standard order   sio_df %>%   filter(player_name == \"anatomecha\",!is.na(supermetroid_label)) %>%   arrange(segment_number) %>%   # should really filter to last date   # will need to fix this when there's more than one anatomecha run   select(supermetroid_label) %>%   mutate(split_anatomecha = 1:n())  levels(sio_df$split) <- anatomecha_splits$split usethis::use_data(anatomecha_splits) routes <-  nested_splits %>%   # head() %>%    mutate(event = map(splits, \\(df) left_join(df, anatomecha_splits, by = \"supermetroid_label\")),          route_anatomecha = map(event, \\(df) df %>% filter(!is.na(split_anatomecha)) %>%  pull(split_anatomecha)),          route_standard = map_lgl(route_anatomecha,                                   \\(x) all(sort(x) == x))          )"},{"path":"https://softloud.github.io/supermetroid/articles/splits.html","id":"time-vs-cumulative-time-by-splits","dir":"Articles","previous_headings":"","what":"time vs cumulative time by splits","title":"splits","text":"","code":"# dashboard this for y axis # dashboard this for x axis, too selector tool with tick boxes, select all, clear  # plot <-    sio_df %>%    left_join(anatomecha_splits, by = \"supermetroid_label\") %>%    filter(!is.na(supermetroid_label)) %>%    mutate(split_anatomecha = as_factor(split_anatomecha),          t_h = realtime_end_ms/1000/60          ) %>%    ggplot(aes(x = split_anatomecha, y = t_h, group=run_id)) +   geom_line(colour=sm_cols$orange, alpha = 0.2) +   geom_point(colour=sm_cols$orange, alpha = 0.2) +   theme_sm(base_size = 30) +   labs(     title = \"Players take different routes\",     subtitle = \"Real time completion of each game event would be        always increasing if all players took the same route as anatomecha\" %>% str_wrap(60),     x = \"Game event (loot, boss, etc.)\" %>% str_wrap(12),     y = \"Real time completion (minutes)\" %>% str_wrap(20),     caption = \"splits.io\"   ) +   theme(     axis.text.x = element_text(angle=90)   ) +   scale_x_discrete(labels=c(\"start\", anatomecha_splits$supermetroid_label)) +   facet_grid(route_standard ~. )  #> Error in `combine_vars()`: #> ! At least one layer must contain all faceting variables: #>   `route_standard` #> ✖ Plot is missing `route_standard` #> ✖ Layer 1 is missing `route_standard` #> ✖ Layer 2 is missing `route_standard`  # ggplotly(plot) # selected_split <- \"ice beam\"  selected_split <- \"ice beam\"# sample(anatomecha_splits$supermetroid_label, 1) rank <- c(1,25)  #xlim <- c(0.8, 1.2)  # + #   xlim(xlim[1], xlim[2])"},{"path":[]},{"path":[]},{"path":"https://softloud.github.io/supermetroid/articles/splits.html","id":"try-knn","dir":"Articles","previous_headings":"Towards the best route > identifying clusters","what":"Try knn","title":"splits","text":"Wide-form array: - columns events - rows routes - values mean event time think work individual observations. Get array segments Set n-fold cross validation Evaluated accuracy KNn classifer different values k cross validation","code":"# get an array of segments"},{"path":"https://softloud.github.io/supermetroid/articles/splits.html","id":"identifying-clusters-1","dir":"Articles","previous_headings":"Towards the best route","what":"identifying clusters","title":"splits","text":"Try taking mean value event route, imputing missing values local means. impute via local mean? , need impute, conditional values array. Need read imputation. Perhaps just write imputation, think calculate . apply hierarchical clustering find .","code":"# create wideform array routes_wide <-    routes_raw %>%      rename(game_event = supermetroid_label) %>%      group_by(run_id) %>%      filter(realtime_end_ms == max(realtime_end_ms),            game_event %in% anatomecha_splits$supermetroid_label            ) %>%      ungroup() %>%      distinct() %>%      # dplyr::group_by(run_id, game_event) %>%     # dplyr::summarise(n = dplyr::n(), .groups = \"drop\") %>%     # dplyr::filter(n > 1L)      pivot_wider(id_cols = \"run_id\",                  names_from = \"game_event\",                  values_from = \"realtime_end_ms\") library(caret) #> Loading required package: lattice #>  #> Attaching package: 'caret' #> The following object is masked from 'package:purrr': #>  #>     lift  trControl <- trainControl(method  = \"cv\",                           number  = 5)   fit <- train(supermetroid_label ~ realtime_end_ms,              method     = \"knn\",              tuneGrid   = expand.grid(k = 1:10),              trControl  = trControl,              metric     = \"Accuracy\",              data       = routes_raw) routes_wide <-  routes %>%    select(route_id, runs) %>%    unnest(runs) %>%    left_join(sio_df %>%                filter(split %in% anatomecha_splits$supermetroid_label) %>%                select(run_id,                      realtime_end_ms, split) %>%                group_by(run_id, split) %>%                filter(realtime_end_ms==max(realtime_end_ms)),              by = \"run_id\") %>%    group_by(route_id, run_id) %>%    # 0 entries must be corrupt?   filter(realtime_end_ms != 0) %>%    pivot_wider(names_from = \"split\", values_from = \"realtime_end_ms\") %>%    janitor::clean_names() sio_routes_wide <- routes_wide  usethis::use_data(sio_routes_wide) library(caret)  preProcValues <-   preProcess(routes_wide %>% ungroup() %>% select(-c(run_id, route_id)))  trControl <- trainControl(method  = \"cv\",                           number  = 5)  # routes_wide %>% names() %>% paste(collapse =\"+\") %>%  cat() fit <-   train(     route_id ~ morph_ball + bombs +       charge_beam + varia_suit + speed_booster +       wave_beam + grapple_beam + ice_beam + gravity_suit +       space_jump + spring_ball +       plasma_beam + screw_attack + spazer +       hi_jump_boots + phantoon + draygon +       ridley + kraid + x_ray + mother_brain + escape,     method     = \"knn\",     tuneGrid   = expand.grid(k = 1:10),     trControl  = trControl,     metric     = \"Accuracy\",     data       = routes_wide   ) #> Error in na.fail.default(structure(list(route_id = c(\"route 167\", \"route 29\", : missing values in object   predict(preProcValues) #> Error in predict.preProcess(preProcValues): argument \"newdata\" is missing, with no default ice_beam <-  routes_wide %>%    select(route_id, route_id, ice_beam) %>%    group_by(route_id) %>%    summarise(     ice_beam = mean(ice_beam)   ) %>%    ungroup() %>%    filter(!is.na(ice_beam))  #> Adding missing grouping variables: `run_id`  clusters <- dist(ice_beam) %>% hclust() #> Warning in dist(ice_beam): NAs introduced by coercion  plot(clusters, labels = ice_beam$route_id) library(ggdendro)  ggdendrogram(clusters) # fuckit write csv write_csv(routes_wide, \"dev/routes_wide.csv\") #> Error: Cannot open file for writing: #> * 'dev/routes_wide.csv' import numpy as np from sklearn.impute import KNNImputer  routes_wide = pd.read_csv(\"dev/routes_wide.csv\") #> Error: NameError: name 'pd' is not defined imputer = KNNImputer()  df_knn_imputed = pd.DataFrame(imputer.fit_transform(routes_wide.drop(columns = ['run_id', 'route_id']))) #> Error: NameError: name 'pd' is not defined # set up df of imputed data in R x_event = py$df_knn_imputed #> Error in eval(expr, envir, enclos): object 'py' not found  colnames(x_event) <- routes_wide %>% ungroup() %>%  select(-c(route_id, run_id)) %>% colnames() #> Error: object 'x_event' not found  routes_imputed =    routes_wide %>% select(route_id, run_id) %>% bind_cols(x_event) #> Error: object 'x_event' not found # try using caret to do knn classification  routes_imputed %>% View() #> Error in eval(expr, envir, enclos): object 'routes_imputed' not found  routes_scaled <-    routes_imputed %>%       ungroup() %>%      select(-c(route_id, run_id)) %>%      mutate(across(everything(), scale)) %>%    bind_cols(routes_imputed %>% select(route_id, run_id)) %>%    select(route_id, run_id, everything()) #> Error in eval(expr, envir, enclos): object 'routes_imputed' not found  # https://rpubs.com/pmtam/knn  # Run algorithms using 10-fold cross validation trainControl <- trainControl(method=\"repeatedcv\", number=10, repeats=3) metric <- \"Accuracy\"  grid <- expand.grid(.k=seq(1,20,by=1))  fit.knn <- train(route_id  # ~ ice_beam,                  ~ # run_id                     + morph_ball + bombs +       charge_beam + varia_suit + speed_booster +       wave_beam + grapple_beam + ice_beam + gravity_suit +       space_jump + spring_ball +       plasma_beam + screw_attack + spazer +       hi_jump_boots + phantoon + draygon +       ridley + kraid + x_ray + mother_brain + escape,        data=routes_scaled %>% select(-run_id), method=\"knn\",                  metric=metric ,trControl=trainControl, tuneGrid=grid) #> Error in eval(expr, p): object 'routes_scaled' not found   knn.k1 <- fit.knn$bestTune # keep this Initial k for testing with knn() function in next section #> Error in eval(expr, envir, enclos): object 'fit.knn' not found print(fit.knn) #> Error in eval(expr, envir, enclos): object 'fit.knn' not found"},{"path":"https://softloud.github.io/supermetroid/articles/src.html","id":"speedrun-com","dir":"Articles","previous_headings":"","what":"speedrun.com","title":"src","text":"Speedrun.com (according two speed runners ’ve spoken ) canonical leaderboard speed runners internet. believed complete set (’d like check data) speed runs, canonical ranking players amongst community Speedrun.com ranking.  code data extracted cleaned visualisation .","code":"data(src_df)  all_run_raincloud(src_run_df) src_df %>% head() %>% gt()"},{"path":"https://softloud.github.io/supermetroid/articles/src.html","id":"api","dir":"Articles","previous_headings":"speedrun.com","what":"api","title":"src","text":"Python module accessing speedrun.com (many thanks maintainer…).","code":"# this chunk is only evaluated when data is updated  # this code from # https://github.com/blha303/srcomapi  # load Python module  import srcomapi, srcomapi.datatypes as dt import pandas as pd # for wrangling into df import time   # call api src_api = srcomapi.SpeedrunCom(); src_api.debug = 1  # It's recommended to cache the game ID and use it for future requests. # Data is cached for the current session by classname/id so future # requests for the same game are instantaneous.  src_api.search(srcomapi.datatypes.Game, {\"name\": \"super metroid\"})  # can we add a historical == true to this? game = _[0]  srcomapi_runs = {} for category in game.categories:   if not category.name in srcomapi_runs:     srcomapi_runs[category.name] = {}   if category.type == 'per-level':     for level in game.levels:       srcomapi_runs[category.name][level.name] = dt.Leaderboard(src_api, data=src_api.get(\"leaderboards/{}/level/{}/{}?embed=variables\".format(game.id, level.id, category.id)))   else:     srcomapi_runs[category.name] = dt.Leaderboard(src_api, data=src_api.get(\"leaderboards/{}/category/{}?embed=variables\".format(game.id, category.id)))   ### 100% Super Metroid leaderboard leaderboard = srcomapi_runs['100%'] # this chunk is only evaluated when data is updated  # Now to inspect what I have; I'm pretty new to python, so this is a bit of an exploration.  # this gives an error, hmm leaderboard.keys()  # what is leaderboard? type(leaderboard) # hmm not so helpful  # experimenting with what I can get out of the object  # oooh leaderboard has an attribute that gives a nested dictionary type(leaderboard.data)  # what else can I get out? leaderboard.embeds  leaderboard.category # returns 100% # can't seem to get much more out of leaderboard   # inspect leaderboard dictionary leaderboard.data.keys() leaderboard.data['game'] leaderboard.data['runs']  src_runs = leaderboard.data['runs'] # list of  type(src_runs) # dictionaries type(src_runs[1])   # extracting specific values src_runs[0].keys()  # rank src_runs[0]['place']  # run as a nested dictionary src_runs[0]['run'].keys()"},{"path":"https://softloud.github.io/supermetroid/articles/src.html","id":"run-dataframe","dir":"Articles","previous_headings":"speedrun.com","what":"Run dataframe","title":"src","text":"","code":"n_obs = len(src_runs)  # how to get splits? [src_runs][x]['run']['splits']  # extract elements with list comprehension (new tool for me) src_run_df = pd.DataFrame({   'run_id' : [src_runs[x]['run']['id'] for x in range(n_obs)],   # need to inspect what happens to historical ranking   'rank' : [src_runs[x]['place'] for x in range(n_obs)],    't_s' : [src_runs[x]['run']['times']['realtime_t'] for x in range(n_obs)],   'date' : [src_runs[x]['run']['date'] for x in range(n_obs)],   'player_id' : [pd.DataFrame(src_runs[x]['run']['players']).iloc[0,1]      for x in range(n_obs)] })  # inspect runs dataframe src_run_df.head() src_run_df.shape"},{"path":"https://softloud.github.io/supermetroid/articles/src.html","id":"player-data","dir":"Articles","previous_headings":"speedrun.com","what":"Player data","title":"src","text":"","code":"# this loop fails because not all ids are valid   # get a list of player records for each valid player id src_players = [] for player in list(src_run_df.player_id.unique()):   print(\"loop index\")   print(len(src_players))   print(player)   user = src_api.get_user(player)   src_players.append(user) # curiously this works on first three records but not on all  # get a list of player records for each valid player id src_players = [] for player in src_run_df.player[0:3]:   print(\"loop index\")   print(len(src_players))   print(player)   user = src_api.get_user(player)   src_players.append(user) # not all ids work when passed to thingy # try-catch to identify which users' ids I can call src_valid_players = [] src_invalid_players = [] src_users = []  for src_player in list(src_run_df.player_id.unique()):   try:      user = src_api.get_user(src_player)     src_users.append(user)     src_valid_players.append(src_player)   except:     src_invalid_players.append(src_player)   time.sleep(3)  len(src_players)      # this many records failed len(src_invalid_players)  # this many records succeeded len(src_valid_players)"},{"path":"https://softloud.github.io/supermetroid/articles/src.html","id":"player-dataframe","dir":"Articles","previous_headings":"speedrun.com > Player data","what":"Player dataframe","title":"src","text":"","code":"# extract for single  src_users[0].data['id'] # each user has an attribute that is a dictionary src_users[0].data.keys() # for matching back src_users[1].data['id'] src_users[1].data['names']['international'] src_users[1].data['location']['country']['names']['international']"},{"path":"https://softloud.github.io/supermetroid/articles/src.html","id":"location-of-players-on-speedrun-com","dir":"Articles","previous_headings":"speedrun.com > Player data","what":"Location of players on speedrun.com","title":"src","text":"","code":"# extract list of player locations and locations separately valid_player_locations = [] invalid_player_locations = [] player_locations = []  for src_user in range(len(src_users)):   print(\"loop index\")   print(len(valid_player_locations) + len(invalid_player_locations))   try:      player_location = src_users[src_user].data['location']['country']['names']['international']     valid_player_locations.append(src_user)     player_locations.append(player_location)   except:     invalid_player_locations.append(src_user)     player_locations.append(\"missing\")      len(valid_player_locations) len(invalid_player_locations) len(player_locations) # extract player data into dataframe     src_player_df = pd.DataFrame({   'player_name' : [src_users[x].data['names']['international']     for x in range(len(src_users))],   'location' : player_locations,   'player_id' : [src_users[x].data['id'] for x in range(len(src_users))]  })  src_player_df.head() # join runs with player data src_run_player_df = src_player_df.merge(src_run_df, how = \"right\", on = \"player_id\") # bring it over into sweet, sweet easier R src_df_all_obs <- py$src_run_player_df %>%    mutate(     player_name = ifelse(is.na(player_name), player_id, player_name)   ) %>% select(rank, player_name, date, t_s, location, contains(\"id\"))"},{"path":"https://softloud.github.io/supermetroid/articles/src.html","id":"visualise-runs","dir":"Articles","previous_headings":"speedrun.com","what":"Visualise runs","title":"src","text":"Now data speedrun.com leaderboard, can plot distribution runs. handful 0 entries > 3 hours. 0 entries run times gametime captured, realtime tool player used record run. analyses realtime, exclude observations. also interest comparing speed runners, opposed logging playing game, takes hours. Since {r round(prop_greater_3hrs, 2) * 100}% runs greater 3 hours, negligible, arguably speed runs. define Super Metroid speed run, analysis, Super Metroid 100% run takes 3 hours.","code":"# get the data from python into R  all_run_raincloud(src_df_all_obs) # how many runs are really low? src_df_all_obs %>%    filter(t_s < 4000 | t_s > 3 * 60 * 60) (prop_greater_3hrs <- sum(src_df_all_obs$t_s > 3 * 60 * 60) /     nrow(src_df_all_obs))"},{"path":"https://softloud.github.io/supermetroid/articles/src.html","id":"raincloud","dir":"Articles","previous_headings":"speedrun.com","what":"Raincloud","title":"src","text":"","code":"src_df_all_obs %>%   filter(     # remove 0 length runs     t_s > 0,      # exclude runs > 3 hours     t_s < 3 * 60 * 60) %>%     all_run_raincloud()"},{"path":"https://softloud.github.io/supermetroid/articles/src.html","id":"write-run-data-from-speedrun-com-to-supermetroid","dir":"Articles","previous_headings":"speedrun.com","what":"Write run data from speedrun.com to supermetroid","title":"src","text":"","code":"# this chunk is evaluated when data is updated src_df <-    src_df_all_obs %>%    # filter runs to less than 3 hours, and weird 0 length records   # we won't consider these speed runs   filter(t_s > 0, t_s < 3 * 60 * 60) %>%    mutate(     rank = as.integer(rank),     player_name = as.character(player_name),     date = ymd(date),     country = as.character(location)   )   usethis::use_data(src_df, overwrite=TRUE)"},{"path":"https://softloud.github.io/supermetroid/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Charles Gray. Author, maintainer. Dave Hunt. Contributor. Mattias Hansson. Contributor.","code":""},{"path":"https://softloud.github.io/supermetroid/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gray C (2023). supermetroid: Super Metroid players' speed runs get competetive?. R package version 0.0.0.9000, https://softloud.github.io/supermetroid/.","code":"@Manual{,   title = {supermetroid: When do Super Metroid players' speed runs get competetive?},   author = {Charles Gray},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://softloud.github.io/supermetroid/}, }"},{"path":"https://softloud.github.io/supermetroid/index.html","id":"supermetroid","dir":"","previous_headings":"","what":"When do Super Metroid players' speed runs get competetive?","title":"When do Super Metroid players' speed runs get competetive?","text":"analysis repository accompanies PyData Copenhagen June 2023. Super Metroid speed run data captured leaderboards, analysed answer following question, posed player, , Super Metroid speed runner. times Super Metroid 100% speed runs get competitive?","code":""},{"path":"https://softloud.github.io/supermetroid/index.html","id":"what-is-super-metroid","dir":"","previous_headings":"","what":"What is Super Metroid?","title":"When do Super Metroid players' speed runs get competetive?","text":"exploration-focused platformers known Metroidvanias derive genre name two different series, ’s one game ’re judged . Super Metroid wasn’t first Metroidvania, first Metroid game also focus exploring large interconnected map using new abilities open new areas, polish, visual direction, atmosphere created involved experience predecessors. Released 1994, Super Metroid’s shadow looms every game genre since… - thegamehoard 2022 source: wikipedia","code":""},{"path":"https://softloud.github.io/supermetroid/index.html","id":"super-metroid-speed-running","dir":"","previous_headings":"","what":"Super Metroid speed running","title":"When do Super Metroid players' speed runs get competetive?","text":"part verification speed run results, many players upload video run youtube.","code":""},{"path":[]},{"path":[]},{"path":"https://softloud.github.io/supermetroid/index.html","id":"speed-run-times-from-speedruncom","dir":"","previous_headings":"","what":"Speed run times from speedrun.com","title":"When do Super Metroid players' speed runs get competetive?","text":"interpretable x axis","code":""},{"path":"https://softloud.github.io/supermetroid/index.html","id":"where-are-super-metroid-players","dir":"","previous_headings":"","what":"Where are Super Metroid players?","title":"When do Super Metroid players' speed runs get competetive?","text":"","code":"#> Error in UseMethod(\"rename\"): no applicable method for 'rename' applied to an object of class \"function\""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://softloud.github.io/supermetroid/index.html","id":"super-metroid-is-the-top-snes-speed-runner-game","dir":"","previous_headings":"Super Metroid and speed running","what":"Super Metroid is the top SNES speed runner game","title":"When do Super Metroid players' speed runs get competetive?","text":"convert coloured barchart, grouped game, coloured category can scrape data?","code":""},{"path":[]},{"path":"https://softloud.github.io/supermetroid/reference/all_run_raincloud.html","id":null,"dir":"Reference","previous_headings":"","what":"Raincloud plot of speedrun.com run times — all_run_raincloud","title":"Raincloud plot of speedrun.com run times — all_run_raincloud","text":"Raincloud plot speedrun.com run times","code":""},{"path":"https://softloud.github.io/supermetroid/reference/all_run_raincloud.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raincloud plot of speedrun.com run times — all_run_raincloud","text":"","code":"all_run_raincloud(   run_df = src_run_df,   xmin = min(src_run_df$t_s)/60,   xmax = max(src_run_df$t_s)/60,   base_size = 20,   source = \"speedrun.com via srcomapi\" )"},{"path":"https://softloud.github.io/supermetroid/reference/all_run_raincloud.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raincloud plot of speedrun.com run times — all_run_raincloud","text":"run_df Dataframe column run times seconds. xmin Set limits x axis, shiny slider input, minutes. xmax Set max x axis, shiny slider, minutes. base_size theme minimal source Caption provenance","code":""},{"path":"https://softloud.github.io/supermetroid/reference/anatomecha_splits.html","id":null,"dir":"Reference","previous_headings":"","what":"Splitsio smdata: anatomecha's splits — anatomecha_splits","title":"Splitsio smdata: anatomecha's splits — anatomecha_splits","text":"See vignette splits","code":""},{"path":"https://softloud.github.io/supermetroid/reference/anatomecha_splits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Splitsio smdata: anatomecha's splits — anatomecha_splits","text":"","code":"anatomecha_splits"},{"path":"https://softloud.github.io/supermetroid/reference/anatomecha_splits.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Splitsio smdata: anatomecha's splits — anatomecha_splits","text":"object class data.frame 22 rows 2 columns.","code":""},{"path":[]},{"path":"https://softloud.github.io/supermetroid/reference/cum_t_route_vis.html","id":null,"dir":"Reference","previous_headings":"","what":"Players take different routes — cum_t_route_vis","title":"Players take different routes — cum_t_route_vis","text":"Acts sio_df.","code":""},{"path":"https://softloud.github.io/supermetroid/reference/cum_t_route_vis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Players take different routes — cum_t_route_vis","text":"","code":"cum_t_route_vis(ylim = range(sio_df$realtime_end_ms)/1000/60, base_size = 10)"},{"path":"https://softloud.github.io/supermetroid/reference/cum_t_route_vis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Players take different routes — cum_t_route_vis","text":"ylim Set y min max (shiny slider input). selected_splits String vector %% filter.","code":""},{"path":"https://softloud.github.io/supermetroid/reference/distinct_routes.html","id":null,"dir":"Reference","previous_headings":"","what":"Distinct routes — distinct_routes","title":"Distinct routes — distinct_routes","text":"Used route-graph route-matching vignettes","code":""},{"path":"https://softloud.github.io/supermetroid/reference/distinct_routes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distinct routes — distinct_routes","text":"","code":"distinct_routes"},{"path":"https://softloud.github.io/supermetroid/reference/distinct_routes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Distinct routes — distinct_routes","text":"object class tbl_df (inherits tbl, data.frame) 211 rows 3 columns.","code":""},{"path":[]},{"path":"https://softloud.github.io/supermetroid/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://softloud.github.io/supermetroid/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://softloud.github.io/supermetroid/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://softloud.github.io/supermetroid/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://softloud.github.io/supermetroid/reference/ranked_runs.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualise each run — ranked_runs","title":"Visualise each run — ranked_runs","text":"Takes sio_df. Need join rankings get y-axis ordering.","code":""},{"path":"https://softloud.github.io/supermetroid/reference/ranked_runs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualise each run — ranked_runs","text":"","code":"ranked_runs(selected_split = NULL, base_size = 40)"},{"path":"https://softloud.github.io/supermetroid/reference/ranked_runs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualise each run — ranked_runs","text":"base_size sm_theme theme_minimal. segment. anatomecha_splits split specificied, highlight . selected_segment NULL plot produces plot highlighted","code":""},{"path":"https://softloud.github.io/supermetroid/reference/sio_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Splitsio smdata: time series observations — sio_df","title":"Splitsio smdata: time series observations — sio_df","text":"See vignette splits","code":""},{"path":"https://softloud.github.io/supermetroid/reference/sio_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Splitsio smdata: time series observations — sio_df","text":"","code":"sio_df"},{"path":"https://softloud.github.io/supermetroid/reference/sio_df.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Splitsio smdata: time series observations — sio_df","text":"object class data.frame 19815 rows 14 columns.","code":""},{"path":[]},{"path":"https://softloud.github.io/supermetroid/reference/sio_routes_wide.html","id":null,"dir":"Reference","previous_headings":"","what":"Wide array of runtime at segment by run — sio_routes_wide","title":"Wide array of runtime at segment by run — sio_routes_wide","text":"Wide array runtime segment run","code":""},{"path":"https://softloud.github.io/supermetroid/reference/sio_routes_wide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wide array of runtime at segment by run — sio_routes_wide","text":"","code":"sio_routes_wide"},{"path":"https://softloud.github.io/supermetroid/reference/sio_routes_wide.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Wide array of runtime at segment by run — sio_routes_wide","text":"object class grouped_df (inherits tbl_df, tbl, data.frame) 538 rows 24 columns.","code":""},{"path":[]},{"path":"https://softloud.github.io/supermetroid/reference/sio_splits_df.html","id":null,"dir":"Reference","previous_headings":"","what":"smdatasets — sio_splits_df","title":"smdatasets — sio_splits_df","text":"smdata included supermetroid package.","code":""},{"path":"https://softloud.github.io/supermetroid/reference/sio_splits_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"smdatasets — sio_splits_df","text":"","code":"sio_splits_df"},{"path":"https://softloud.github.io/supermetroid/reference/sio_splits_df.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"smdatasets — sio_splits_df","text":"object class data.frame 19815 rows 12 columns.","code":""},{"path":[]},{"path":"https://softloud.github.io/supermetroid/reference/sm_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Super Metroid visual theme elements — sm_cols","title":"Super Metroid visual theme elements — sm_cols","text":"Super Metroid visual theme elements","code":""},{"path":"https://softloud.github.io/supermetroid/reference/sm_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Super Metroid visual theme elements — sm_cols","text":"","code":"sm_cols"},{"path":"https://softloud.github.io/supermetroid/reference/sm_cols.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Super Metroid visual theme elements — sm_cols","text":"object class list length 13.","code":""},{"path":"https://softloud.github.io/supermetroid/reference/sm_cols_look.html","id":null,"dir":"Reference","previous_headings":"","what":"Inspect colours in the theme — sm_cols_look","title":"Inspect colours in the theme — sm_cols_look","text":"Inspect colours theme","code":""},{"path":"https://softloud.github.io/supermetroid/reference/sm_cols_look.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inspect colours in the theme — sm_cols_look","text":"","code":"sm_cols_look(base_size = 20)"},{"path":"https://softloud.github.io/supermetroid/reference/sm_world.html","id":null,"dir":"Reference","previous_headings":"","what":"World mop of players — sm_world","title":"World mop of players — sm_world","text":"World mop players","code":""},{"path":"https://softloud.github.io/supermetroid/reference/sm_world.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"World mop of players — sm_world","text":"","code":"sm_world(df = src_df)"},{"path":"https://softloud.github.io/supermetroid/reference/src_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Speedrun.com leaderboard smdata — src_df","title":"Speedrun.com leaderboard smdata — src_df","text":"Player run data joined. See src vignette.","code":""},{"path":"https://softloud.github.io/supermetroid/reference/src_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Speedrun.com leaderboard smdata — src_df","text":"","code":"src_df"},{"path":"https://softloud.github.io/supermetroid/reference/src_df.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Speedrun.com leaderboard smdata — src_df","text":"object class data.frame 586 rows 7 columns.","code":""},{"path":[]},{"path":"https://softloud.github.io/supermetroid/reference/src_run_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Speedrun.com leaderboard smdata — src_run_df","title":"Speedrun.com leaderboard smdata — src_run_df","text":"Speedrun.com leaderboard smdata","code":""},{"path":"https://softloud.github.io/supermetroid/reference/src_run_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Speedrun.com leaderboard smdata — src_run_df","text":"","code":"src_run_df"},{"path":"https://softloud.github.io/supermetroid/reference/src_run_df.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Speedrun.com leaderboard smdata — src_run_df","text":"object class data.frame 582 rows 4 columns.","code":""},{"path":[]},{"path":"https://softloud.github.io/supermetroid/reference/theme_sm.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Super Metroid theme to ggplot — theme_sm","title":"Add Super Metroid theme to ggplot — theme_sm","text":"Add Super Metroid theme ggplot","code":""},{"path":"https://softloud.github.io/supermetroid/reference/theme_sm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Super Metroid theme to ggplot — theme_sm","text":"","code":"theme_sm(base_size = 15)"},{"path":"https://softloud.github.io/supermetroid/reference/theme_sm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Super Metroid theme to ggplot — theme_sm","text":"base_size theme_minimal leaderboard_api string api \"splits.io\" \"speedrunner.com\" Stuff Possibly add source argument","code":""},{"path":"https://softloud.github.io/supermetroid/reference/top_five_vis.html","id":null,"dir":"Reference","previous_headings":"","what":"Top five plot — top_five_vis","title":"Top five plot — top_five_vis","text":"Top five plot","code":""},{"path":"https://softloud.github.io/supermetroid/reference/top_five_vis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Top five plot — top_five_vis","text":"","code":"top_five_vis(base_size = 10)"},{"path":"https://softloud.github.io/supermetroid/reference/top_five_vis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Top five plot — top_five_vis","text":"base_size theme_minimal argument","code":""},{"path":"https://softloud.github.io/supermetroid/reference/top_games_vis.html","id":null,"dir":"Reference","previous_headings":"","what":"Super Metroid vs top games on speedrun.com — top_games_vis","title":"Super Metroid vs top games on speedrun.com — top_games_vis","text":"Super Metroid vs top games speedrun.com","code":""},{"path":"https://softloud.github.io/supermetroid/reference/top_games_vis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Super Metroid vs top games on speedrun.com — top_games_vis","text":"","code":"top_games_vis(base_size = 10)"}]
